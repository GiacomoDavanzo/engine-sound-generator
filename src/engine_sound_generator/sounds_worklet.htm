<!DOCTYPE html>
<html>

<head>

   <meta charset=utf-8>
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <link rel="stylesheet" href="../styles/styles.css">

   <title>Sounds Worklet</title>

   <script type="module">
      import * as THREE from '../three_js/build/three.module.js';
      import { SoundGeneratorAudioListener, SineWaveSoundGenerator, EngineSoundGenerator, ElectricEngineSoundGenerator } from './sound_generator_worklet.js';
      import Engine from '../engine.js';

      /*
       * loads the audio worklet modules and then calls moduleInit
       */
      function moduleLoad() {
         var loadingManager = new THREE.LoadingManager();
         loadingManager.onLoad = function () {
            moduleInit();
         };

         loadingManager.onProgress = function (url, itemsLoaded, itemsTotal) {
            console.log('Loading file\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.');
         };

         listener = new SoundGeneratorAudioListener();
         SineWaveSoundGenerator.load(loadingManager, listener, ".");
         EngineSoundGenerator.load(loadingManager, listener, ".");

         ElectricEngineSoundGenerator.load(loadingManager, listener, ".")
      }

      function moduleInit() {
         scene = new THREE.Scene();
         canvas = document.getElementById("canvas");
         renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });
         camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);
         camera.position.x = 0;
         camera.position.y = 3;
         camera.position.z = 10;

         camera.add(listener);
         scene.add(camera);

         renderer.setClearColor(0x0000ff, 1);

         var ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
         scene.add(ambientLight);

         var directionalLight = new THREE.DirectionalLight(0xffffff, 5.0);
         directionalLight.position.x = 1000;
         directionalLight.position.y = 1000;
         scene.add(directionalLight);

         cube = new THREE.Mesh(new THREE.BoxGeometry(5, 5, 5), new THREE.MeshPhysicalMaterial({ color: 0x007500 }));
         cube.position.y = 0;
         scene.add(cube);

         audioContext = listener.context;
         soundSineWave = new SineWaveSoundGenerator({ listener: listener });

         soundElectricEngine = new ElectricEngineSoundGenerator({ listener: listener })

         engine = new Engine({ momentOfInertia: 0.3 });
         /*
          * generates the sound using a worklet
          * The lengths of the different waveguides are specified in samples.
          */
         soundCarEngine = new EngineSoundGenerator({
            listener: listener, parameters: {
               cylinders: 4,

               intakeWaveguideLength: 100,
               exhaustWaveguideLength: 100,
               extractorWaveguideLength: 100,

               intakeOpenReflectionFactor: 0.01,
               intakeClosedReflectionFactor: 0.95,

               exhaustOpenReflectionFactor: 0.01,
               exhaustClosedReflectionFactor: 0.95,
               ignitionTime: 0.016,

               straightPipeWaveguideLength: 128,
               straightPipeReflectionFactor: 0.01,

               mufflerElementsLength: [10, 15, 20, 25],
               action: 0.1,

               outletWaveguideLength: 5,
               outletReflectionFactor: 0.01
            }
         });

         let inputSineWaveVolume = document.getElementById("input_sine_wave_volume");
         let gainNode = soundSineWave.gain;
         gainNode.gain.value = 0.01 * inputSineWaveVolume.value;

         let inputCarEngineVolume = document.getElementById("input_car_engine_volume");
         gainNode = soundCarEngine.gain;
         gainNode.gain.value = 0.01 * inputCarEngineVolume.value;

         // let electricSineWaveVolume = document.getElementById("input_sine_wave_volume"); // TODO change
         gainNode = soundElectricEngine.gain;
         gainNode.gain.value = 0.01 * inputCarEngineVolume.value;

         cube.add(soundSineWave);
         cube.add(soundCarEngine);

         audioAnalyser = audioContext.createAnalyser();
         audioAnalyser.fftSize = 2048;
         soundElectricEngine.gain.connect(audioAnalyser)
         soundSineWave.gain.connect(audioAnalyser);
         soundCarEngine.gain.connect(audioAnalyser);
         audioAnalyserBuffer = new Uint8Array(audioAnalyser.frequencyBinCount);

         canvasSpectogram = document.getElementById("canvas_spectogram");
         canvasSpectogram.style.width = "100%";
         canvasSpectogram.style.height = canvasAudioAnalyseHeight + "px";
         canvasSpectogram.width = canvasAudioAnalyseWidth;
         canvasSpectogram.height = 2 * canvasAudioAnalyseHeight;
         canvasSpectogramContext = canvasSpectogram.getContext("2d");
         canvasSpectogramContext.fillStyle = "black";
         canvasSpectogramContext.rect(0, 0, canvasSpectogram.width, canvasSpectogram.height);
         canvasSpectogramContext.fill();

         lastTimeAnimate = window.performance.now();

         animate();
      }

      var lastTimeAnimate;

      function animate() {

         var time = window.performance.now();
         var dt = time - lastTimeAnimate;

         renderer.render(scene, camera);
         requestAnimationFrame(animate);

         if (soundCarEngine.source) {
            let rpmParam = soundCarEngine.worklet.parameters.get('rpm');
            rpmParam.value = engine.rpm;
         }

         if (soundElectricEngine.source) {
            let rpmParam = soundElectricEngine.worklet.parameters.get('rpm');
            rpmParam.value = engine.rpm;
         }

         engine.update(0.001 * dt);

         updateCanvasSpectogram();

         lastTimeAnimate = time;
      }

      /*
       * sets the color of the pixel at the x- and y-coordinate passed as arguments
       * on imageData
       */
      function setPixel(imageData, width, height, x, y, r, g, b) {
         var index = (y * width + x) * 4;
         imageData.data[index] = r;
         imageData.data[index + 1] = g;
         imageData.data[index + 2] = b;
      }

      /*
       * moves the image on the canvas for the spectogram on pixel to the left and
       * writes the current frequency domain data on the pixels on the right
       */
      function updateCanvasSpectogram() {

         var pixelsToMoveLeft = 1;
         audioAnalyser.getByteFrequencyData(audioAnalyserBuffer);

         var imageData = canvasSpectogramContext.getImageData(pixelsToMoveLeft, 0, canvasSpectogram.width - pixelsToMoveLeft, canvasSpectogram.height);
         canvasSpectogramContext.putImageData(imageData, 0, 0);

         var imageData = canvasSpectogramContext.getImageData(0, 0, canvasSpectogram.width, canvasSpectogram.height);

         let width = canvasSpectogram.width;
         let height = canvasSpectogram.height;

         for (let i = 0; i < height; i++) {
            setPixel(imageData, width, height, width - 1, height - i, 0, audioAnalyserBuffer[i], 0);
         }

         canvasSpectogramContext.putImageData(imageData, 0, 0);

      }

      function playSound() {
         labelCarEngineRpm.innerHTML = Math.trunc(engine.rpm);
         window.setTimeout(playSound, 25);
      }

      var soundStarted = false;

      function startSoundGenerator() {
         if (soundStarted) {
            return;
         }
         playSound();
         soundStarted = true;
      }

      function playSoundSineWave() {
         soundSineWave.play();
         startSoundGenerator();
      }

      function playSoundCarEngine() {
         soundCarEngine.play();
         startSoundGenerator();
      }

      function playSoundElectricEngine() {
         soundElectricEngine.play();
         startSoundGenerator();
      }

      window.moduleLoad = moduleLoad;
      window.moduleInit = moduleInit;
      window.playSoundSineWave = playSoundSineWave;
      window.playSoundCarEngine = playSoundCarEngine;

      window.playSoundElectricEngine = playSoundElectricEngine;
      window.engine = engine;

   </script>

   <script>

      var scene;
      var canvas;
      var canvasAudioAnalyseWidth = 2000;
      var canvasAudioAnalyseHeight = 700;
      var canvasSpectogram;
      var canvasSpectogramContext;
      var renderer;
      var camera;
      var cube;
      var listener;
      var soundSineWave;
      var engine;
      var soundCarEngine;

      var isElectricEngine = true;
      var soundElectricEngine;

      var audioContext;
      var audioAnalyser;
      var audioAnalyserBuffer;

      var labelSineWaveVolume;
      var inputSineWaveFrequency;
      var labelSineWaveFrequency;

      var labelCarEngineVolume;
      var labelCarEngineVolumeIntake;
      var labelCarEngineVolumeEngineBlockVibrations;
      var labelCarEngineVolumeOutlet;
      var labelCarEngineRpm;
      var labelCarEngineThrottle;

      function init() {

         let inputObjectPosition = document.getElementById("input_object_position");
         input_object_position.addEventListener("input", (event) => cube.position.x = event.target.value);

         // input event listener for the sine wave sound
         let inputSineWaveVolume = document.getElementById("input_sine_wave_volume");
         inputSineWaveVolume.addEventListener("input", updateSineWaveVolume);
         labelSineWaveVolume = document.getElementById("label_sine_wave_volume");
         labelSineWaveVolume.innerHTML = "Volume " + inputSineWaveVolume.value + " %";

         inputSineWaveFrequency = document.getElementById("input_sine_wave_frequency");
         inputSineWaveFrequency.addEventListener("input", updateSineWaveFrequency);
         labelSineWaveFrequency = document.getElementById("label_sine_wave_frequency");
         labelSineWaveFrequency.innerHTML = "Frequency  " + inputSineWaveFrequency.value + " Hz";

         // input event listener for the car engine sound
         let inputCarEngineVolume = document.getElementById("input_car_engine_volume");
         inputCarEngineVolume.addEventListener("input", updateCarEngineVolume);
         /* labelCarEngineVolume = document.getElementById("label_car_engine_volume");
         labelCarEngineVolume.innerHTML = "Volume " + inputCarEngineVolume.value + " %"; */

         let inputCarEngineVolumeIntake = document.getElementById("input_car_engine_volume_intake");
         inputCarEngineVolumeIntake.addEventListener("input", updateCarEngineVolumeIntake);
         /* labelCarEngineVolumeIntake = document.getElementById("label_car_engine_volume_intake");
         labelCarEngineVolumeIntake.innerHTML = "Iniettori " + inputCarEngineVolumeIntake.value + " %"; */

         let inputCarEngineVolumeEngineBlockVibrations = document.getElementById("input_car_engine_volume_engine_block_vibrations");
         inputCarEngineVolumeEngineBlockVibrations.addEventListener("input", updateCarEngineVolumeEngineBlockVibrations);
         /* labelCarEngineVolumeEngineBlockVibrations = document.getElementById("label_car_engine_volume_engine_block_vibrations");
         labelCarEngineVolumeEngineBlockVibrations.innerHTML = "Vibrazioni blocco motore " + inputCarEngineVolumeEngineBlockVibrations.value + " %"; */

         let inputCarEngineVolumeOutlet = document.getElementById("input_car_engine_volume_outlet");
         inputCarEngineVolumeOutlet.addEventListener("input", updateCarEngineVolumeOutlet);
         /* labelCarEngineVolumeOutlet = document.getElementById("label_car_engine_volume_outlet");
         labelCarEngineVolumeOutlet.innerHTML = "Outlet Volume " + inputCarEngineVolumeOutlet.value + " %"; */

         let inputCarEngineThrottle = document.getElementById("input_car_engine_throttle");
         inputCarEngineThrottle.addEventListener("input", updateCarEngineThrottle);
         /* labelCarEngineThrottle = document.getElementById("label_car_engine_throttle");
         labelCarEngineThrottle.innerHTML = "Throttle  " + inputCarEngineThrottle.value + " %"; */

         labelCarEngineRpm = document.getElementById("span_car_engine_rpm");

         window.moduleLoad();
      }

      function updateSineWaveVolume(event) {
         labelSineWaveVolume.innerHTML = "Volume " + event.target.value + " %";
         let gainNode = soundSineWave.gain;
         gainNode.gain.value = 0.01 * event.target.value;
      }

      function updateSineWaveFrequency(event) {
         labelSineWaveFrequency.innerHTML = "Frequency " + event.target.value + " Hz";
         let frequencyParam = soundSineWave.worklet.parameters.get('frequency');
         frequencyParam.value = event.target.value;
         soundSineWave.frequency = event.target.value;

         // frequencyParam = soundElectricEngine.worklet.parameters.get('frequency')
         // frequencyParam.value = event.target.value;
         // soundElectricEngine.frequency = event.target.value;
      }

      async function togglePlaySineWaveSound(button) {
         await audioContext.resume();
         if (button.value === "Accensione") {
            button.value = "Stop";
            playSoundSineWave();
            return;
         }
         button.value = "Accensione";
         soundSineWave.stop();
      }

      function updateCarEngineVolume(event) {
         /* labelCarEngineVolume.innerHTML = "Volume " + event.target.value + " %"; */
         let gainNode = soundCarEngine.gain;
         gainNode.gain.value = 0.01 * event.target.value;

         gainNode = soundElectricEngine.gain;
         gainNode.gain.value = 0.01 * event.target.value;
      }

      function updateCarEngineVolumeIntake(event) {
         /* labelCarEngineVolumeIntake.innerHTML = "Iniettori " + event.target.value + " %"; */
         let gainNode = soundCarEngine.gainIntake;
         gainNode.gain.value = 0.01 * event.target.value;
      }

      function updateCarEngineVolumeEngineBlockVibrations(event) {
         /* labelCarEngineVolumeEngineBlockVibrations.innerHTML = "Vibrazioni blocco motore " + event.target.value + " %"; */
         let gainNode = soundCarEngine.gainEngineBlockVibrations;
         gainNode.gain.value = 0.01 * event.target.value;
      }

      function updateCarEngineVolumeOutlet(event) {
         /* labelCarEngineVolumeOutlet.innerHTML = "Outlet Volume " + event.target.value + " %"; */
         let gainNode = soundCarEngine.gainOutlet;
         gainNode.gain.value = 0.01 * event.target.value;
      }

      function updateCarEngineThrottle(event) {
         /* labelCarEngineThrottle.innerHTML = "Throttle " + event.target.value + " %"; */
         engine.throttle = 0.01 * event.target.value;
         let throttleParam = soundCarEngine.worklet.parameters.get('throttle');
         throttleParam.value = engine.throttle;
      }

      async function togglePlayCarEngineSound(button) {
         await audioContext.resume();
         if (button.value === "Accensione") {

            engine.start();
            button.value = "Stop";
            button.classList.add("running")

            document.getElementById('switch_to_electric').disabled = true;

            if (isElectricEngine) {
               playSoundElectricEngine();
            } else {
               playSoundCarEngine();
            }

            return;
         }

         engine.starting = false;
         engine.started = false;
         button.value = "Accensione";

         document.getElementById('switch_to_electric').disabled = false;
         button.classList.remove("running")

         if (isElectricEngine) {
            soundElectricEngine.stop();
         } else {
            soundCarEngine.stop();
         }
      }

      function toggleElectricEngine() {
         isElectricEngine = !isElectricEngine;

         let button = document.getElementById("switch_to_electric");

         let engineBlockVibrations = document.getElementById("input_car_engine_volume_engine_block_vibrations");
         let outletVolume = document.getElementById("input_car_engine_volume_outlet");
         let intakeVolume = document.getElementById("input_car_engine_volume_intake");

         if (isElectricEngine) {
            button.value = "⚡️"

            engineBlockVibrations.setAttribute("disabled", "true");
            outletVolume.setAttribute("disabled", "true");
            intakeVolume.setAttribute("disabled", "true");
         } else {
            button.value = '⛽️'

            engineBlockVibrations.removeAttribute("disabled");
            outletVolume.removeAttribute("disabled");
            intakeVolume.removeAttribute("disabled");
         }

      }

   </script>

</head>

<body onload="init()">

   <fieldset style="display: none;">
      <legend>Object</legend>
      <input type="range" id="input_object_position" name="input_object_position" min="-25" max="25" step="0.01"
         value="0"> <label for="input_object_position" id="label_object_position">Position</label>
   </fieldset>
   <fieldset style="display: none;">
      <legend>Sine wave</legend>

      <input type="range" id="input_sine_wave_volume" name="input_sine_wave_volume" min="0" max="100" value="10"> <label
         for="input_sine_wave_volume" id="label_sine_wave_volume">Volume</label>
      <input type="range" id="input_sine_wave_frequency" name="input_sine_wave_frequency" min="20" max="20000"
         value="440"> <label for="input_sine_wave_frequency" id="label_sine_wave_frequency">Frequency</label>
      <input type="button" id="button_play_sine_wave_sound" onclick="togglePlaySineWaveSound(this)"
         value="Accensione"></input>

   </fieldset>

   <div id="mainRow">
      <fieldset>
         <label for="input_car_engine_volume" id="label_car_engine_volume">Volume</label>
         <input type="range" id="input_car_engine_volume" name="input_car_engine_volume" min="0" max="100" value="80">
         <label for="input_car_engine_volume_intake" id="label_car_engine_volume_intake">Iniettori</label>
         <input disabled="true" type="range" id="input_car_engine_volume_intake" name="input_car_engine_volume_intake"
            min="0" max="100" value="100">
         <label for="input_car_engine_volume_engine_block_vibrations"
            id="label_car_engine_volume_engine_block_vibrations">Vibrazioni blocco motore</label>
         <input disabled="true" type="range" id="input_car_engine_volume_engine_block_vibrations"
            name="input_car_engine_volume_engine_block_vibrations" min="0" max="100" value="100">
         <label for="input_car_engine_volume_outlet" id="label_car_engine_volume_outlet">Scarico</label>
         <input disabled="true" type="range" id="input_car_engine_volume_outlet" name="input_car_engine_volume_outlet"
            min="0" max="100" value="100">
         <label for="input_car_engine_throttle" id="label_car_engine_throttle">Acceleratore</label>
         <input type="range" id="input_car_engine_throttle" name="input_car_engine_throttle" min="0" max="50" value="0">

         Rpm <br />
         <span id="span_car_engine_rpm">0</span>

         <div id="buttons">
            <input type="button" id="switch_to_electric" onclick="toggleElectricEngine()" value="⚡️" />
            <input type="button" id="button_car_engine_sound" onclick="togglePlayCarEngineSound(this)"
               value="Accensione"></input>
         </div>
      </fieldset>

      <canvas id="canvas" style="display: none;" height="350px" width="750px"></canvas>

      <canvas id="canvas_spectogram" height="700px" width="100%"></canvas>
   </div>


</body>

</html>